// This file was auto-generated by ML.NET Model Builder.
using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.ML;
using Microsoft.ML.Data;
using Microsoft.ML.Trainers;
using Microsoft.ML.Trainers.LightGbm;
using Microsoft.ML.Transforms;

namespace HAMZA_PFE
{
    public partial class MLModel1
    {
        public const string RetrainFilePath =  @"C:\Users\HP ELITEBOOK 830 G8\source\repos\HAMZA_PFE\HAMZA_PFE\dataset\Malware dataset.csv";
        public const char RetrainSeparatorChar = ',';
        public const bool RetrainHasHeader =  true;
        public const bool RetrainAllowQuoting =  false;

         /// <summary>
        /// Train a new model with the provided dataset.
        /// </summary>
        /// <param name="outputModelPath">File path for saving the model. Should be similar to "C:\YourPath\ModelName.mlnet"</param>
        /// <param name="inputDataFilePath">Path to the data file for training.</param>
        /// <param name="separatorChar">Separator character for delimited training file.</param>
        /// <param name="hasHeader">Boolean if training file has a header.</param>
        public static void Train(string outputModelPath, string inputDataFilePath = RetrainFilePath, char separatorChar = RetrainSeparatorChar, bool hasHeader = RetrainHasHeader, bool allowQuoting = RetrainAllowQuoting)
        {
            var mlContext = new MLContext();

            var data = LoadIDataViewFromFile(mlContext, inputDataFilePath, separatorChar, hasHeader, allowQuoting);
            var model = RetrainModel(mlContext, data);
            SaveModel(mlContext, model, data, outputModelPath);
        }

        /// <summary>
        /// Load an IDataView from a file path.
        /// </summary>
        /// <param name="mlContext">The common context for all ML.NET operations.</param>
        /// <param name="inputDataFilePath">Path to the data file for training.</param>
        /// <param name="separatorChar">Separator character for delimited training file.</param>
        /// <param name="hasHeader">Boolean if training file has a header.</param>
        /// <returns>IDataView with loaded training data.</returns>
        public static IDataView LoadIDataViewFromFile(MLContext mlContext, string inputDataFilePath, char separatorChar, bool hasHeader, bool allowQuoting)
        {
            return mlContext.Data.LoadFromTextFile<ModelInput>(inputDataFilePath, separatorChar, hasHeader, allowQuoting: allowQuoting);
        }


        /// <summary>
        /// Save a model at the specified path.
        /// </summary>
        /// <param name="mlContext">The common context for all ML.NET operations.</param>
        /// <param name="model">Model to save.</param>
        /// <param name="data">IDataView used to train the model.</param>
        /// <param name="modelSavePath">File path for saving the model. Should be similar to "C:\YourPath\ModelName.mlnet.</param>
        public static void SaveModel(MLContext mlContext, ITransformer model, IDataView data, string modelSavePath)
        {
            // Pull the data schema from the IDataView used for training the model
            DataViewSchema dataViewSchema = data.Schema;

            using (var fs = File.Create(modelSavePath))
            {
                mlContext.Model.Save(model, dataViewSchema, fs);
            }
        }


        /// <summary>
        /// Retrain model using the pipeline generated as part of the training process.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <param name="trainData"></param>
        /// <returns></returns>
        public static ITransformer RetrainModel(MLContext mlContext, IDataView trainData)
        {
            var pipeline = BuildPipeline(mlContext);
            var model = pipeline.Fit(trainData);

            return model;
        }

        /// <summary>
        /// build the pipeline that is used from model builder. Use this function to retrain model.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <returns></returns>
        public static IEstimator<ITransformer> BuildPipeline(MLContext mlContext)
        {
            // Data process configuration with pipeline data transformations
            var pipeline = mlContext.Transforms.Categorical.OneHotEncoding(@"hash", @"hash", outputKind: OneHotEncodingEstimator.OutputKind.Indicator)      
                                    .Append(mlContext.Transforms.ReplaceMissingValues(new []{new InputOutputColumnPair(@"millisecond", @"millisecond"),new InputOutputColumnPair(@"state", @"state"),new InputOutputColumnPair(@"usage_counter", @"usage_counter"),new InputOutputColumnPair(@"prio", @"prio"),new InputOutputColumnPair(@"static_prio", @"static_prio"),new InputOutputColumnPair(@"normal_prio", @"normal_prio"),new InputOutputColumnPair(@"policy", @"policy"),new InputOutputColumnPair(@"vm_pgoff", @"vm_pgoff"),new InputOutputColumnPair(@"vm_truncate_count", @"vm_truncate_count"),new InputOutputColumnPair(@"task_size", @"task_size"),new InputOutputColumnPair(@"cached_hole_size", @"cached_hole_size"),new InputOutputColumnPair(@"free_area_cache", @"free_area_cache"),new InputOutputColumnPair(@"mm_users", @"mm_users"),new InputOutputColumnPair(@"map_count", @"map_count"),new InputOutputColumnPair(@"hiwater_rss", @"hiwater_rss"),new InputOutputColumnPair(@"total_vm", @"total_vm"),new InputOutputColumnPair(@"shared_vm", @"shared_vm"),new InputOutputColumnPair(@"exec_vm", @"exec_vm"),new InputOutputColumnPair(@"reserved_vm", @"reserved_vm"),new InputOutputColumnPair(@"nr_ptes", @"nr_ptes"),new InputOutputColumnPair(@"end_data", @"end_data"),new InputOutputColumnPair(@"last_interval", @"last_interval"),new InputOutputColumnPair(@"nvcsw", @"nvcsw"),new InputOutputColumnPair(@"nivcsw", @"nivcsw"),new InputOutputColumnPair(@"min_flt", @"min_flt"),new InputOutputColumnPair(@"maj_flt", @"maj_flt"),new InputOutputColumnPair(@"fs_excl_counter", @"fs_excl_counter"),new InputOutputColumnPair(@"lock", @"lock"),new InputOutputColumnPair(@"utime", @"utime"),new InputOutputColumnPair(@"stime", @"stime"),new InputOutputColumnPair(@"gtime", @"gtime"),new InputOutputColumnPair(@"cgtime", @"cgtime"),new InputOutputColumnPair(@"signal_nvcsw", @"signal_nvcsw")}))      
                                    .Append(mlContext.Transforms.Concatenate(@"Features", new []{@"hash",@"millisecond",@"state",@"usage_counter",@"prio",@"static_prio",@"normal_prio",@"policy",@"vm_pgoff",@"vm_truncate_count",@"task_size",@"cached_hole_size",@"free_area_cache",@"mm_users",@"map_count",@"hiwater_rss",@"total_vm",@"shared_vm",@"exec_vm",@"reserved_vm",@"nr_ptes",@"end_data",@"last_interval",@"nvcsw",@"nivcsw",@"min_flt",@"maj_flt",@"fs_excl_counter",@"lock",@"utime",@"stime",@"gtime",@"cgtime",@"signal_nvcsw"}))      
                                    .Append(mlContext.Transforms.Conversion.MapValueToKey(outputColumnName:@"classification",inputColumnName:@"classification",addKeyValueAnnotationsAsText:false))      
                                    .Append(mlContext.MulticlassClassification.Trainers.LightGbm(new LightGbmMulticlassTrainer.Options(){NumberOfLeaves=4,NumberOfIterations=4,MinimumExampleCountPerLeaf=20,LearningRate=1,LabelColumnName=@"classification",FeatureColumnName=@"Features",Booster=new GradientBooster.Options(){SubsampleFraction=1,FeatureFraction=1,L1Regularization=2E-10,L2Regularization=1},MaximumBinCountPerFeature=254}))      
                                    .Append(mlContext.Transforms.Conversion.MapKeyToValue(outputColumnName:@"PredictedLabel",inputColumnName:@"PredictedLabel"));

            return pipeline;
        }
    }
 }
